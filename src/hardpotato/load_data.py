import numpy as np


class Test:
    """Test class for the load_data module.

    This class is primarily used for testing and debugging purposes.
    """

    def __init__(self) -> None:
        """Initialize the Test class and print confirmation message."""
        print("Test from load_data module")


class Read:
    """Base class for reading data files from potentiostats.

    Provides common functionality for loading and parsing
    data files generated by different potentiostats.

    Attributes:
        file_path: Complete path to the data file.
        data: Numpy array containing the loaded data.
        x: First column of data (typically time or potential).
        y: Remaining columns of data (typically current).
    """

    def __init__(self) -> None:
        """Initialize the Read class by constructing the complete file path."""
        self.file_path: str = self.folder + "/" + self.fileName

    def read(self, text: str = "0", model: str = "0") -> None:
        """Read data from a file based on the potentiostat model.

        Args:
            text: String to search for in the file to determine where data begins.
                 This is used primarily for CHI potentiostat files.
            model: Potentiostat model identifier ('chi760e', 'emstatpico', etc.).

        Note:
            - For CHI potentiostats: Searches for 'text' to determine where data begins,
              then loads the data skipping the header rows.
            - For Emstat Pico: Loads all data with comma delimiter.
        """
        self.delimiter = ","
        if model[0:3] == "chi":
            self.skiprows = self.search(text)
            if self.skiprows:
                self.data = np.loadtxt(
                    self.file_path, delimiter=self.delimiter, skiprows=self.skiprows
                )
                self.x = self.data[:, 0]
                self.y = -self.data[:, 1:]
            else:
                print(
                    'Could not find string "'
                    + text
                    + '" to skip rows.'
                    + " Data not loaded."
                )
                self.x = np.array([])
                self.y = np.array([])
        elif model == "emstatpico":
            self.data = np.loadtxt(self.file_path, delimiter=self.delimiter)
            self.t = self.data[:, 0]
            self.E = self.data[:, 1]
            self.i = self.data[:, 2:]
        else:
            self.data = np.loadtxt(
                self.file_path, delimiter=self.delimiter, skiprows=self.skiprows
            )
            self.E = self.data[:, 0]
            self.i = self.data[:, 1:]

    def search(self, text: str) -> int:
        """Search for a string in the file and return the line number.

        Args:
            text: The string to search for in the file.

        Returns:
            int: The line number where the string was found, or 0 if not found.
        """
        file = open(self.file_path, "r")
        count = 0
        flag = 0
        for line in file:
            count += 1
            if text in line:
                return count
        return 0


class XY(Read):
    """Generic data reader for files with x and y columns.

    This class allows loading arbitrary data files with customizable
    row skipping and delimiter options.

    Examples:
        ```python
        import hardpotato as hp

        # Load a data file with default settings
        data = hp.load_data.XY("data.txt", folder="C:/Data")

        # Load a CSV file skipping the first 10 rows
        data = hp.load_data.XY("data.csv", folder="C:/Data", skiprows=10)
        ```
    """

    def __init__(
        self,
        fileName: str = "file",
        folder: str = ".",
        skiprows: int = 0,
        delimiter: str = ",",
        model: str = "0",
    ) -> None:
        """Initialize XY data reader.

        Args:
            fileName: Name of the file to read.
            folder: Path to the folder containing the file.
            skiprows: Number of rows to skip at the beginning of the file.
            delimiter: Character used to separate values in the file.
            model: Potentiostat model identifier (if applicable).
        """
        self.fileName = fileName
        self.folder = folder
        Read.__init__(self)
        self.skiprows = skiprows
        self.delimiter = delimiter
        self.read()


class CV(Read):
    """Reader for Cyclic Voltammetry (CV) data files.

    This class loads and parses CV data files, extracting potential (E)
    and current (i) data.

    Attributes:
        E: Array containing potential data in V.
        i: Array containing current data in A.

    Examples:
        ```python
        import hardpotato as hp
        import matplotlib.pyplot as plt

        # Load CV data file
        cv_data = hp.load_data.CV("cv_experiment.txt",
                                 folder="C:/Data",
                                 model="chi760e")

        # Plot the CV curve
        plt.figure()
        plt.plot(cv_data.E, cv_data.i)
        plt.xlabel('Potential (V)')
        plt.ylabel('Current (A)')
        plt.show()
        ```
    """

    def __init__(
        self, fileName: str = "file", folder: str = ".", model: str = "0"
    ) -> None:
        """Initialize CV data reader.

        Args:
            fileName: Name of the file to read.
            folder: Path to the folder containing the file.
            model: Potentiostat model identifier ('chi760e', 'emstatpico', etc.).
        """
        self.fileName = fileName
        self.folder = folder
        text = "Potential/V,"
        Read.__init__(self)
        self.read(text, model)
        if model[0:3] == "chi":
            self.E = self.x
            self.i = self.y


class LSV(Read):
    """Reader for Linear Sweep Voltammetry (LSV) data files.

    This class loads and parses LSV data files, extracting potential (E)
    and current (i) data. It uses the same format as CV data.

    Attributes:
        E: Array containing potential data in V.
        i: Array containing current data in A.

    Examples:
        ```python
        import hardpotato as hp
        import matplotlib.pyplot as plt

        # Load LSV data file
        lsv_data = hp.load_data.LSV("lsv_experiment.txt",
                                   folder="C:/Data",
                                   model="chi760e")

        # Plot the LSV curve
        plt.figure()
        plt.plot(lsv_data.E, lsv_data.i)
        plt.xlabel('Potential (V)')
        plt.ylabel('Current (A)')
        plt.show()
        ```
    """

    def __init__(
        self, fileName: str = "file", folder: str = ".", model: str = "0"
    ) -> None:
        """Initialize LSV data reader.

        Args:
            fileName: Name of the file to read.
            folder: Path to the folder containing the file.
            model: Potentiostat model identifier ('chi760e', 'emstatpico', etc.).
        """
        cv = CV(fileName, folder, model)  # Same as CV
        self.E = cv.E
        self.i = cv.i


class CA(Read):
    """Reader for Chronoamperometry (CA) data files.

    This class loads and parses CA data files, extracting time (t)
    and current (i) data.

    Attributes:
        t: Array containing time data in seconds.
        i: Array containing current data in A.

    Examples:
        ```python
        import hardpotato as hp
        import matplotlib.pyplot as plt

        # Load CA data file
        ca_data = hp.load_data.CA("ca_experiment.txt",
                                 folder="C:/Data",
                                 model="emstatpico")

        # Plot the CA curve
        plt.figure()
        plt.plot(ca_data.t, ca_data.i)
        plt.xlabel('Time (s)')
        plt.ylabel('Current (A)')
        plt.show()
        ```
    """

    def __init__(
        self, fileName: str = "file", folder: str = ".", model: str = "0"
    ) -> None:
        """Initialize CA data reader.

        Args:
            fileName: Name of the file to read.
            folder: Path to the folder containing the file.
            model: Potentiostat model identifier ('chi760e', 'emstatpico', etc.).
        """
        self.fileName = fileName
        self.folder = folder
        text = "Time/sec,"
        Read.__init__(self)
        self.read(text, model)
        if model[0:3] == "chi":
            self.t = self.x
            # self.E = self.E
            self.i = self.y


class OCP(Read):
    """Reader for Open Circuit Potential (OCP) data files.

    This class loads and parses OCP data files, extracting time (t)
    and potential (E) data.

    Attributes:
        t: Array containing time data in seconds.
        E: Array containing potential data in V.

    Examples:
        ```python
        import hardpotato as hp
        import matplotlib.pyplot as plt

        # Load OCP data file
        ocp_data = hp.load_data.OCP("ocp_experiment.txt",
                                   folder="C:/Data",
                                   model="chi760e")

        # Plot the OCP curve
        plt.figure()
        plt.plot(ocp_data.t, ocp_data.E)
        plt.xlabel('Time (s)')
        plt.ylabel('Potential (V)')
        plt.show()
        ```
    """

    def __init__(
        self, fileName: str = "file", folder: str = ".", model: str = "0"
    ) -> None:
        """Initialize OCP data reader.

        Args:
            fileName: Name of the file to read.
            folder: Path to the folder containing the file.
            model: Potentiostat model identifier ('chi760e', 'emstatpico', etc.).
        """
        self.fileName = fileName
        self.folder = folder
        text = "Time/sec,"
        Read.__init__(self)
        self.read(text, model)
        if model[0:3] == "chi":
            self.t = self.x
            self.E = self.y
